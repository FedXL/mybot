import re
import aiogram.utils.markdown as md
from aiogram import types
from aiogram.types import CallbackQuery, Message
from base.base_connectors import get_from_base
from utils.utils_lite import create_counter

def make_no_discount_text(money):
    text = md.text(
        md.text('<b>–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ Tradeinn</b>'),
        md.text(' '),
        md.text('–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Tradeinn.com —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é.'),
        md.text(' '),
        md.text('–ö–æ–º–∏—Å—Å–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π:'),
        md.text(' '),
        md.text('üîπ –¥–æ 100k - 10%'),
        md.text('üîπ –æ—Ç 100–∫ –¥–æ 200k - 8%'),
        md.text('üîπ –æ—Ç 200–∫ - 7%'),
        md.text(' '),
        md.text(f'–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É {money} —Ç—ã—Å.—Ä—É–±. –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è –ø–æ–∫–∞ 10%, –Ω–æ —ç—Ç–æ –ª–µ–≥–∫–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å!'),
        md.text(' '),
        md.text('<b>–î–û 1 –ê–í–ì–£–°–¢–ê –í–´ –ú–û–ñ–ï–¢–ï –°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó–´ –° –ö–û–ú–ò–°–°–ò–ï–ô 8%!</b>'),sep='\n')
    return text

def make_discount_text(discount):
    text = md.text(
        md.text('<b>–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ Tradeinn</b>'),
        md.text(' '),
        md.text('–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Tradeinn.com —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é.'),
        md.text(' '),
        md.text('–ö–æ–º–∏—Å—Å–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—É–º–º—ã –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π:'),
        md.text(' '),
        md.text('üîπ –¥–æ 100k - 10%'),
        md.text('üîπ –æ—Ç 100–∫ –¥–æ 200k - 8%'),
        md.text('üîπ –æ—Ç 200–∫ - 7%'),
        md.text(' '),
        md.text(f'<b>–í–ê–®–ê –ö–û–ú–ò–°–°–ò–Ø –ü–†–ò –û–ü–õ–ê–¢–ï - {discount}%</b>'), sep='\n')
    return text








def make_text_hello(username):
    text_hello = md.text(
        md.text("ü´±   –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,", "*", username, "*", "!", "–Ø –ë–æ—Ç-–ü–æ–º–æ—â–Ω–∏–∫."),
        md.text(" "),
        md.text("üî∏  –ú–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ , –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'."),
        md.text(""),
        md.text("üî∏  –û—Ç–≤–µ—Ç—ã –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'K–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'."),
        md.text(" "),
        md.text(
            "üó£  –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ –ø–æ–º–æ–≥, –¥–ª—è —Å–≤—è–∑–∏ —Å –∂–∏–≤—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç. "),
        sep="\n"
    )
    return text_hello


def thank_u():
    text = md.text(
        md.text("üî∂ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑! üî∂"),
        md.text(" "),
        md.text("–ë—É–¥–µ–º —Ä–∞–¥—ã –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É."
                " –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ"
                " https://t.me/shipkz_discussing."),
        md.text(" "),
        sep="\n",
    )
    return text


def make_text_for_FAQ(value: str):
    try:
        with open("storages" + value + ".html", "r", ) as fi:
            result = fi.read()
            fi.close()
    except Exception as ex:
        print("—á–µ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    return result


def make_user_info_report(query: CallbackQuery, order_id=None) -> md.text():
    user_id = query.from_user.id
    user_first_name = query.from_user.first_name
    user_second_name = query.from_user.last_name
    username = query.from_user.username
    result = md.text(
        md.text(f" #{order_id}"),
        md.text(f"Type: <b>{query.data}</b>"),
        md.text(f"User: ", md.hlink(f"#ID_{user_id}", f"tg://user?id={user_id}")),
        md.text(f"First Name: {user_first_name}"),
        md.text(f"Second Name: {user_second_name}"),
        md.text(f"UserName :  @{username}"),
        sep="\n"
    )
    return result


def make_user_info_report_from_message(message: types.Message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_second_name = message.from_user.last_name
    result = md.text(
        md.text(f"#ID_{user_id}"),
        md.text(f"First Name: {user_first_name}"),
        f"|",
        md.text(f"Second Name: {user_second_name}"),
        sep="\n"
    )
    return result


def add_orders_to_mask(id, mask:list) ->list:
    """–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∞—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    stmt = f"""SELECT order_status.order_id, order_status.manager_id FROM orders 
                JOIN order_status ON orders.id = order_status.order_id
                WHERE order_status.status = true
                AND orders.client = {id}
                ORDER BY order_status.order_id DESC;"""

    query_set = get_from_base(stmt)
    if query_set:
        for order in query_set:
            order_str = "/order_" + str(order[0])
            manager_str = str([order[1]]).replace("'", "")
            if manager_str != '[None]':
                order_id = order[0]

                stmt2 = f"""SELECT managers.short_name FROM order_status
                                JOIN managers ON order_status.manager_id = managers.user_id
                                WHERE order_status.order_id = {order_id}"""

                short_name = get_from_base(stmt2)[0][0]
                manager_str = "[" + str(short_name) + "]"
            mask.append(order_str + " | " + manager_str)
    return mask


def get_mask_from_message(text_to_parce):
    """ –º–∞—Å–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ """
    result = []
    id = get_id_from_text(text_to_parce)
    text_to_parce = text_to_parce.split("\n")

    result.append(f"#ID_{id}")
    result.append(text_to_parce[1])

    result = add_orders_to_mask(id, result)
    return result

def get_mask_from_web_message(text_to_parce,user_id):
    result = []
    text_to_parce = text_to_parce.split("\n")
    result.append(f"#WEB_{user_id}")
    result.append(text_to_parce[1])
    return result

def make_mask_to_messages(income, user_id):
    """—ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∞—Å–∫—É —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —é–∑–µ—Ä–æ–≤"""
    assert isinstance(income, types.Message) or isinstance(income, types.CallbackQuery)
    user_first_name = income.from_user.first_name
    user_second_name = income.from_user.last_name
    result = [
        md.text(f"#ID_{user_id}"),
        md.text(f"{user_first_name}",
                f"|",
                f"{user_second_name}",
                )]
    result = add_orders_to_mask(user_id, result)
    result = md.text(*result,sep="\n")
    return result


def order_answer_vocabulary(income, order_id):
    match income:
        case 'KAZ_ORDER_LINKS':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 1', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Ññ{order_id}', '—Å—Å—ã–ª–∫–∏']
        case 'KAZ_ORDER_CABINET':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 1', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Ññ{order_id}', '–¥–æ—Å—Ç—É–ø –≤ –∫–∞–±–∏–Ω–µ—Ç']
        case 'TRADEINN':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 2', f'–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ TradeInn ‚Ññ{order_id}']
        case 'PAYMENT':
            text = ['–í–∞—Ä–∏–∞–Ω—Ç 3', f'–í—ã–∫—É–ø —á–µ—Ä–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞ ‚Ññ{order_id}']
    return text


def make_links_info_text(links):
    counter = create_counter()
    md_obj = [md.hlink("—Å—Å—ã–ª–∫–∞ " + str(counter()), link) for link in links]
    return md_obj


def get_vaflalist(pos=1):
    if pos == 1:
        result = ('–ø–µ—Ä–≤–∞—è',
                  '–≤—Ç–æ—Ä–∞—è',
                  '—Ç—Ä–µ—Ç—å—è',
                  '—á–µ—Ç–≤–µ—Ä—Ç–∞—è',
                  '–ø—è—Ç–∞—è',
                  '—à–µ—Å—Ç–∞—è',
                  '—Å–µ–¥—å–º–∞—è',
                  '–≤–æ—Å—å–º–∞—è',
                  '–¥–µ–≤—è—Ç–∞—è',
                  '–¥–µ—Å—è—Ç–∞—è',
                  '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–∞—è',
                  '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è')
    elif pos == 2:
        result = ('–ø–µ—Ä–≤–æ–π',
                  '–≤—Ç–æ—Ä–æ–π',
                  '—Ç—Ä–µ—Ç—å–µ–π',
                  '—á–µ—Ç–≤–µ—Ä—Ç–æ–π',
                  '–ø—è—Ç–æ–π',
                  '—à–µ—Å—Ç–æ–π',
                  '—Å–µ–¥—å–º–æ–π',
                  '–≤–æ—Å—å–º–æ–π',
                  '–¥–µ–≤—è—Ç–æ–π',
                  '–¥–µ—Å—è—Ç–æ–π',
                  '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–π',
                  '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–π',)
    return result


def get_additional_from_proxi(data):
    """–ù–µ –ø–æ–º–Ω—é —É–∂–µ –≤–∏–¥–∏–º–æ —á—Ç–æ —Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ä–¥–µ—Ä–µ"""
    print("data " * 10, data, sep="\n")
    addition = []
    hrefs = [data.get(key) for key in [('href_' + str(key)) for key in
                                       [i for i in range(1, data.get('num') + 1)]]]
    comments = [data.get(key) for key in
                [('comment_' + str(key)) for key in
                 [i for i in range(1, data.get('num') + 1)]]]
    link = iter(make_links_info_text(hrefs))
    comment = iter(comments)
    addition.append(md.text('shop: ', f"<code>{data['shop']}</code>"))
    for x in hrefs:
        new = md.text(next(link), ": ", f"{next(comment)}")
        addition.append(new)
    return addition


def get_id_from_text(text):
    id = re.search(r"#ID_(\d+)", text)
    if id:
        return id.group(1)
    else:
        return None


class TheWay:
    def __init__(self,id,way):
        self.id=id
        self.way=way


def find_the_way(message: types.Message) -> TheWay:
    print('start find way')
    text = message.reply_to_message.text
    id = re.search(r"#ID_(\d+)", text)
    if id:
        print('teleway')
        result = TheWay(id.group(1),'Telegram way')
        return result
    id = re.search(r"#WEB_(\d+)",text)
    if id:
        print('webway')
        result = TheWay(id.group(1),'Web way')
        return result
    else:
        return None

def make_message_text(message: list) -> md.text():
    print(message)
    result = []
    before = message[:1]
    after = message[1:]

    for is_answer, body in before:
        if is_answer:
            pointer = "‚úÖ"
            if len(body) > 50:
                body = str(body[:50]) + "..."
        else:
            pointer = "üÜò"

        result.append(md.text(pointer, body, sep=" "))
        result.append(md.text(" "))

    for is_answer, body in after:
        if is_answer:
            pointer = ''
        else:
            pointer = 'üëà'
        if len(str(body)) >= 80:
            insert_text = str(body)[:60] + "..."
        else:
            insert_text = str(body)
        result.append(md.text(pointer, insert_text, sep=" "))
    return result

def make_message_text_w(message: list) -> md.text():
    print(message)
    result = []
    before = message[:1]
    after = message[1:]

    for is_answer, body in before:
        if is_answer:
            pointer = "‚úÖ"
            if len(body) > 50:
                body = str(body[:50]) + "..."
        else:
            pointer = "üÜò"

        result.append(md.text(pointer, body, sep=" "))
        result.append(md.text(" "))

    for is_answer, body in after:
        if is_answer:
            pointer = 'üëâ'
        else:
            pointer = 'üëà'
        if len(str(body)) >= 80:
            insert_text = str(body)[:60] + "..."
        else:
            insert_text = str(body)
        result.append(md.text(pointer, insert_text, sep=" "))
    return result




def check_lenght(text: list) -> list:
    while len(str(text)) > 4000:
        text.pop()
    return text


def make_message_text_full(message: list) -> md.text():
    message = check_lenght(message)
    result = []
    before = message[:1]
    after = message[1:]

    for is_answer,time, body in before:
        if is_answer:
            pointer = "‚úÖ"
        else:
            pointer = "üÜò"
        result.append(md.text(pointer,time, body, sep=" "))
        result.append(md.text(" "))
    for is_answer,time, body in after:
        if is_answer:
            pointer = ''
        else:
            pointer = 'üëà'
        result.append(md.text(pointer,time, body, sep=" "))
    return result
